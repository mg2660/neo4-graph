<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Network Graph with Latency Paths</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .node {
            stroke: #fff;
            stroke-width: 1.5px;
        }

        .link {
            stroke-opacity: 0.6;
            stroke-width: 2px;
        }

        .highlighted {
            stroke: blue;
            stroke-width: 4px;
        }

        .alternative {
            stroke: orange;
            stroke-width: 3px;
            stroke-dasharray: 4;
        }
    </style>
</head>
<body>
    <h3>Click on a source node to highlight the shortest and alternative latency paths</h3>
    <svg width="960" height="600"></svg>
    <script>
        const svg = d3.select("svg");
        const width = +svg.attr("width");
        const height = +svg.attr("height");

        const data = {
            nodes: [
                { id: "A", alarm_status: "GREEN" },
                { id: "B", alarm_status: "GREEN" },
                { id: "C", alarm_status: "RED" },
                { id: "D", alarm_status: "GREEN" },
                { id: "E", alarm_status: "AMBER" }
            ],
            links: [
                { source: "A", target: "B", latency: 10 },
                { source: "B", target: "C", latency: 20 },
                { source: "A", target: "D", latency: 15 },
                { source: "D", target: "E", latency: 10 },
                { source: "B", target: "E", latency: 25 }
            ]
        };

        const colorByStatus = {
            GREEN: "green",
            AMBER: "orange",
            RED: "red"
        };

        const simulation = d3.forceSimulation(data.nodes)
            .force("link", d3.forceLink(data.links).id(d => d.id).distance(100))
            .force("charge", d3.forceManyBody().strength(-400))
            .force("center", d3.forceCenter(width / 2, height / 2));

        const link = svg.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(data.links)
            .join("line")
            .attr("class", "link")
            .style("stroke", d => {
                const s = typeof d.source === 'string' ? d.source : d.source.id;
                const t = typeof d.target === 'string' ? d.target : d.target.id;
                const sStatus = data.nodes.find(n => n.id === s).alarm_status;
                const tStatus = data.nodes.find(n => n.id === t).alarm_status;
                return colorByStatus[sStatus === "RED" || tStatus === "RED" ? "RED" :
                                     sStatus === "AMBER" || tStatus === "AMBER" ? "AMBER" : "GREEN"];
            });

        const node = svg.append("g")
            .attr("class", "nodes")
            .selectAll("circle")
            .data(data.nodes)
            .join("circle")
            .attr("r", 10)
            .attr("fill", d => colorByStatus[d.alarm_status])
            .attr("class", "node")
            .on("click", nodeClicked)
            .call(drag(simulation));

        node.append("title").text(d => d.id);

        simulation.on("tick", () => {
            link
                .attr("x1", d => d.source.x)
                .attr("y1", d => d.source.y)
                .attr("x2", d => d.target.x)
                .attr("y2", d => d.target.y);

            node
                .attr("cx", d => d.x)
                .attr("cy", d => d.y);
        });

        function drag(simulation) {
            function dragstarted(event, d) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(event, d) {
                d.fx = event.x;
                d.fy = event.y;
            }

            function dragended(event, d) {
                if (!event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }

            return d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended);
        }

        function nodeClicked(event, source) {
            link.classed("highlighted", false).classed("alternative", false);
            const validNodes = data.nodes.filter(n => n.alarm_status !== "RED").map(n => n.id);
            const validLinks = data.links.filter(l =>
                validNodes.includes(typeof l.source === 'string' ? l.source : l.source.id) &&
                validNodes.includes(typeof l.target === 'string' ? l.target : l.target.id)
            );
            const graph = buildGraph(validLinks);
            const paths = findAllPaths(graph, source.id, validNodes);
            if (paths.length === 0) return;
            paths.sort((a, b) => a.latency - b.latency);
            highlightPath(paths[0].path, "highlighted");
            for (let i = 1; i < Math.min(3, paths.length); i++) {
                highlightPath(paths[i].path, "alternative");
            }
        }

        function buildGraph(links) {
            const graph = {};
            links.forEach(link => {
                const s = typeof link.source === 'string' ? link.source : link.source.id;
                const t = typeof link.target === 'string' ? link.target : link.target.id;
                if (!graph[s]) graph[s] = [];
                if (!graph[t]) graph[t] = [];
                graph[s].push({ node: t, latency: link.latency });
                graph[t].push({ node: s, latency: link.latency });
            });
            return graph;
        }

        function findAllPaths(graph, start, validNodes, end = null, path = [], latency = 0, visited = new Set()) {
            path = [...path, start];
            visited.add(start);
            if (end && start === end) {
                return [{ path, latency }];
            }
            const neighbors = graph[start] || [];
            let paths = [];
            for (const { node, latency: edgeLatency } of neighbors) {
                if (!visited.has(node)) {
                    const newPaths = findAllPaths(graph, node, validNodes, end, path, latency + edgeLatency, new Set(visited));
                    paths = paths.concat(newPaths);
                }
            }
            if (!end && path.length > 1) {
                paths.push({ path, latency });
            }
            return paths;
        }

        function highlightPath(path, className) {
            for (let i = 0; i < path.length - 1; i++) {
                const s = path[i];
                const t = path[i + 1];
                link.filter(d => {
                    const sid = typeof d.source === 'string' ? d.source : d.source.id;
                    const tid = typeof d.target === 'string' ? d.target : d.target.id;
                    return (sid === s && tid === t) || (sid === t && tid === s);
                }).classed(className, true);
            }
        }
    </script>
</body>
</html>
